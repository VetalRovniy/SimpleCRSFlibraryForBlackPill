[env:blackpill_f411ce]
platform = ststm32
board = blackpill_f411ce
framework = arduino
upload_protocol = stlink
;upload_protocol = dfu
build_flags =
   -D TARGET_BLACKPILL
   -D USBCON
   -D PIO_FRAMEWORK_ARDUINO_ENABLE_CDC
   -D USE_ARMSWITCH
   -D ARDUINO_ARCH_STM32
   -D PLATFORM_STM32
lib_ignore = Servo_Pico
monitor_port = COM10
monitor_speed = 115200
monitor_dtr = 1
;debug_tool = dfu
debug_tool = stlink
;debug_port = COM10

[env_common_stm32]
platform = ststm32@13.0.0
board = genericSTM32F103C8
framework = arduino
upload_protocol = stlink
debug_tool = stlink
build_flags_cdc =
    -DUSBCON
    -DPIO_FRAMEWORK_ARDUINO_ENABLE_CDC
lib_ignore = Servo_Pico

# The idea here was to make a CDC version with debugging info
# and an env to build as a HID joystick, but turns out it
# isn't in the core so the feature isn't worth me implementing it
[env:F103_serial]
extends = env_common_stm32
build_flags = ${env_common_stm32.build_flags_cdc}
    -DTARGET_BLUEPILL


[env:CC3D]
extends = env_common_stm32
build_flags = ${env_common_stm32.build_flags_cdc}
   -DTARGET_CC3D

[env:PURPLEPILL]
extends = env_common_stm32
build_flags = ${env_common_stm32.build_flags_cdc}
   -DTARGET_PURPLEPILL

# The build flag ARMSWITCH expects a value of 2000 (armed) or 1000 (disarmed)
# on channel 5. As long as the controller does not send the "armed" state,
# all channels will receive the values specified in OUTPUT_FAILSAFE instead.
# Before using this option, make sure that your failsafe values are correct!
[env:F103_serial_armswitch]
extends = env:F103_serial
build_flags = ${env:F103_serial.build_flags}
  -DUSE_ARMSWITCH

; [env:pipico]
; platform = https://github.com/maxgerhardt/platform-raspberrypi.git
; board_build.core = earlephilhower
; board = pico
; framework = arduino
